# Advancing Focus
---

Greetings everyone.

My name is Glen
and I am here today
to talk to you about
THE MOST EXCITING PART
of working with browsers

<quick pause>

A topic
mind you
that will LITERALLY
make you shout with joy

<quick pause>

and I can tell you are
all SUPER EAGER to hear about
the stupendous
amazing
and totally riveting...

Focus Subsystem!
[Slide: WTF?!?]
[Sound: Needle Scratch]

<pause>

Alright,
I know this isn't
the most glamorous thing
we could be discussing

but sometimes
we have to get a little bit
down in the weeds
and take a long hard look
at the tools we are given
as web developers
and ask
could it be better.

And that's what I want to do today
with the Focus Subsystem...

I am going to dig
a little bit
into focus
what it is
and how it works
and ask is it doing
enough for us

Does it work well?

Does it meet
the needs of the developers?

Could it do more
to be better?

<pause>

First,
In order to answer
these questions
we need to know
what exactly we are talking about
and where it comes from,

So,
Very simply
and glossing over a lot of details...

Focus,
as it relates to user interfaces,
is the process
by which the computer
decides what part of the user interface
receives any human interaction.
A mouse click, a keystroke, etc.

And for any given
human interaction
only one piece,
only one field,
can be the focus
at any given time.

when we press a key
The keyboard reports to
the operating system
which determines what key was pressed.

The operating system
then determines where the user
is currently targeting
their input at...

more precisely,
which window,
is the focus.

If the browser
is the current window focused,
it tells the browser
about the keyboard press.

The browser then does
exactly what the Operating system did
and it determines which window or tab,
within the browser,
is currently targeted
to receive input.

Once the browser has determined
which window or tab
has the focus,
it gets the associated top level DOM document
for that window or tab.

The top level DOM Document
tracks which specific element
in the DOM
that is currently targeted
to receive input.

This is called the "activeElement".

The key press is then
translated into an event
and the event is then fired
with the activeElement
as its target.

So we can see
that focus
is a series of decisions
at every level.
From the operating system level
to the application level
to the DOM level.

<pause>

The activeElement,
together with the focus related events
(focus, blur, focusin, focusout)
and the element.focus() and the element.blur() functions
make up the focus subsystem.

This is everything the browser
programmatically gives us
to understand focus
and manipulate it.
That's it.
In its entirety.

And That's what we are talking about today.
The focus subsystem.
These 7 pieces.

<short pause>

The focus subsystem
was first formally added
to the Document Object Model Specification Level 1
in January of 1998,
with a few minor tweaks
a few years later.

And unsurprisingly,
the focus subsystem hasn't
changed significantly
since then.

And that's fine.
It's a 20 year old API
and it does its job.

Until it doesnt.

<pause>

Say you are
an incredibly dashing
web developer
named glen.
[Poeshn Slide]

And you need to write a web component
that wraps a single field
for entering a username.

And your customer comes to you
and says that the focus
when you press ENTER
should automatically advance
to the next field.

This is a pretty common request.

So our code might look like this:

A note here...
I'm using ZephJS to define
the web component.

ZephJS is a super
simple and tiny library
for writing web components
really easily.

I find it simplifies
writing them greatly.
You can check it out at
zephjs.com

Anyway
back to our story.

We have a customer
that wants a web component
for entering a username
they can re-use
and it must advance the focus
when ENTER is pressed.

Here's our code

import {ZephComponents,html,onEventAt} from "ZephJS";
ZephComponents.define("my-user-field",()=>{
	html(`
		<div class="wrapper">
			<input class="field" type="text"></input>
		</div>
	`);

	onEventAt("input","keyup",(elment,content,event)=>{
		if (event.keyCode===13) {

			???????????????

		}
	});
});

<walk through the code>

you will notice,
that the code
doesnt know what to do
once the correct keyCode
is determined.

Normally,
the code would just
call element.focus()
on the element
it wants to advance the focus to

But in this scenario
that doesnt work.
This is because of How
web components are designed.
they are intended to be
completely encapsulated
and know nothing about
what exists outside of them

This means
using the current focus subsystem
We have no easy way
to just tell the focus
to advance to the next place.

Now,
everyone in this room
who is paying attention
is probably thinking
just walk the tree
starting at your element
and locate the next element
which can receive focus
and advance to that.

Seems like a logical solution, right?
But this brings up a really hard question
about focus...

What makes an element
able to receive focus?
What indicates something is focusable?

And there are some
easy answers here

If the element is an INPUT tag
or SELECT tag
or Link
or BUTTON tag
or contentEditable
it can receive focus.

Except!!!
if it is DISABLED
or has a tabindex attribute of negative one
or is hidden
or is within a fieldset that is DISABLED
or is within a form that is DISABLED
but not all the time.

And what about
if the element
is not visible
or otherwise inert?

See, determining what is Focusable
is really hard.
and its incredibly inconsistent
across different browsers

Someone even made
a fancy chart
https://allyjs.io/data-tables/focusable.html
which I tried to shrink down
and get onto one slide
but there are just
too many edge cases.

Of course,
we can always go to the Spec
and that should be
super easy to understand.

https://www.w3.org/TR/2018/WD-html53-20181018/editing.html#focus
Section 5.4 of the W3C HTML Specification
details the focus subsystem.
Here's what it says about what is focusable

	- Elements that have their tabindex focus flag set, that are not actually disabled, that are not expressly inert, and that are either being rendered or being used as relevant canvas fallback content.

	- The shapes of area elements in an image map associated with an img element that is being rendered and is not expressly inert.

	- The user-agent provided subwidgets of elements that are being rendered and are not actually disabled or expressly inert

	- The scrollable regions of elements that are being rendered and are not expressly inert.

	- The viewport of a Document that is in a browsing context and is not inert.

	- Any other element or part of an element, especially to aid with accessibility or to better match platform conventions.

And I dont know about you
but I find this complicated
and confusing
as hell.

and honestly,
I really dont want to write
a method that tries
to figure this out
becuase,
lets face it,
I am almost certainly
going to get it wrong.

<pause>

So we essentially have two problems

we have no easy way
to advance the focus
automatically.
(Or decrement the focus automatically)

and we have no easy way
to determine what can receive focus,
what is focusable,
if we wanted to walk the tree.

And the annoying thing about
these two problems
is that internally
in the browsers,
both these problems
are already solved.

The browsers,
internally,
have a means to determine
if an element is focusable
and they have a means
to advance the focus to
the next focusable element.

<quick pause>

The focus subsystem today,
is mostly a passive thing.
we can read it,
we can tell where the focus is
and when it changes,
and we can direct it
if we know exactly
where to direct it.
And this is okay...
but its not enough.

It's a twenty year old API
and it is really
starting to show its age.

it could do more
it could be easier
it could be more powerful

And all of That
begins
with exposing
three simple functions...

First,
a method to determine
if something can receive the focus.
I call this, isFocusable(e)

Second and Third,
methods to move the focus
forward or backward
regardless of where
the focus currently is.
I call these
forward() and backward().

And consider
what other focus things
could we expose
or add
to make focus better?

What about a function
to trap (aka limit)
focus to a particular container?
meaning focus would cycle
within the focusable elements
in that container,
but never out of it
until told otherwise.

What about a programmatic way
to order the focusable
elements and enforce
that order.
Sure we have tabindex
to do that
but wouldn't a function
that takes an array of the elements
and does the ordering for us
be really helpful?

And there are other
things that could really make
focus more understandable.
Lots more.

a previousActiveElement property
or history array
of what was previously focused
could be nice.

A programmatic way
to set an element
as the first element
to get the focus
once the page is loaded
might be nice.

And probably other things
I haven't even considered.

<pause>

So naturally,
when you have all these
great ideas to add to browsers
we write a new library
and publish it
to the INTERNET
and everyone
will instantly use it
and throw flowers at your feet
and shower you with praise.

I set out to do that
about six months ago.

I started with a library
called "Tabbable"
written by David Clark.
// Tabbable from David Clark.
// https://github.com/davidtheclark/tabbable

Tabbable will return an array
of all descendant nodes
for a given node
which meet Tabbables internal definition
of what is a focusable element.

I didnt want to try
and write my own
isFocusable() method,
So naturally,
I "stole" the one from Tabbable.

From there I added a global object
to window
called focusManager
for housing
my new focus functions.

And about this time
I started thinking
why am *I* writing a library?
why doesn't the browser
just have these functions natively.
And if not,
is this something I could get changed?

surely, this something
everyone would want!

<pause>

So let me tell you
how you go about changing
the HTML Specification

First, as most of you may be aware
there are two separate
governing bodies
maintaining the HTML standard
at the same time.
The W3C
and the WHATWG

And until this past May
they worked independently
of one another
but tacitly acknowledging
one another.

In May of 2019 (https://www.w3.org/blog/2019/05/w3c-and-whatwg-to-work-together-to-advance-the-open-web-platform/)
both the W3C and WHATWG
signed an agreement
to work together
with the HTML Specification
work being done
entirely in the WHATWG.

This is great news for everyone.
we finally have a single body
overseeing the HTML standard.

<quick pause>

Now,
let us say that you are
an incredibly handsome,
but not super popular,
web developer
and you want to propose some changes
to the HTML specification.
How do you do that?

Well,
six months ago,
you would probably google
something like
"how to propose changes to the HTML standard"
And the first hit you get might be to
the W3C Process Document

Which you would read
for a few minutes
<slowly>
and slowly
feel the sanity
draining from you
as if cthulhu
himself
was sitting next to you
eating pie
and waiting for you to
wither away.

But if you were persistent
you might eventually find
something called the
Web Platform Incubator Community Group
or WICG
which was formed in 2015
to allow people
like you and I
to make proposals
Wooohooo!
Jackpot!

So you write up your idea
and submit it to the WICG
discourse group for discussion

And then you wait
And like three people
read it
and one person comments on it,
and there's a tiny bit of discussion
but nothing else happens
for months.

And you begin to realize
that the either
the WICG Process
really doesn't work

or

that perhaps your idea
is really garbage
and that you
are really garbage.

Thus begins
the spiral of
internet self doubt.

Fortunately,
as the doubt was
just getting going
the aforementioned agreement
between the W3C and WHATWG
comes down
and you realize
you need to get your proposal
in front of WHATWG eyeballs,
Not the WICG eyeballs,
and honestly,
more eyeballs everywhere.

So you open a ticket
on the WHATWG github.
and you write some articles
and post to reddit,
hacker news,
and newsletters,
twitter,
etc.

And this being the internet
you get almost no feedback
except for people pooping
on your idea
because it has no value
to them personally
so it must not have value
to anyone else.

and again you doubt yourself
and again you doubt your idea
and you wonder what to do next.

And then you have a greatest inspiration
you ever had...

you take your idea on the road;
you grab a coveted JSConf speaker slot
and you tell a room full
of eager minds all about

The Focus Traversal API
A Focus Subsystem Proposal to the HTML Specification

This proposal
formally introduces the concepts
of a Focus Traversal API
to solve the three problems
we discussed earlier:

How to determine what is focusable
and how to programmatically
increment/decrement the focus

This API exists
as an additional set of behaviors
over and above
what can be done
with the existing focus system.
Nothing about the existing
focus subsystem changes,
the proposal is purely addative.

This proposal,
built from my initial library work
suggests creating
a top level `window` property
called `focusManager`
which will be used to expose
a series of properties and methods
for working with Focus traversal.

#### Focusable

To address the complexity
of determining if an element
is focusable or not
it is proposed
to create `focusManager.isFocusable(element)`
which will return true
if the given element
is able to receive the focus
according to the Focus rules laid out
in the HTML standard.

#### Next/Previous Focus

Moving the focus
forward or backward
is a key operation for developers
and the Focus Traversal API
seeks to ease this process
with `focusManager.next(element)`
and `focusManager.previous(element)`
methods.

These functions will return
the next (or previous) element
that meets the `isFocusable()` condition,
or null.

This only indicates which element
is next or prior,
it does not actually
move the focus.

For that we turn to...

#### Forward/Backward Focus Traversal

`forward()` takes
the currently focused element
and computes the next element
that meets the `isFocusable()` condition,
and advances the focus to that element
using `element.focus()`.

`backward()` is similar
but it computes the pervious element
that meets the `isFocusable()` condition
and moves the focus to that element
using `element.focus()`.

#### Other Features

As part of this proposal
some additional conveniences
are offered
in an attempt to centralize
and organize the focus system.

`focusManager.currentlyFocused` -
Contains the element
currently holding the focus,
if any.
Functionally the same as
`document.activeElement`.

`focusManager.previouslyFocused` -
Contains the element
that held the focus
prior to the current focus,
if any.

`focusManager.history`
returns an array of the last n
historical focus holders.
It is recommended this be capped
at some number like 50 or 100
to prevent unnecessary memory leakage.

`focusManager.hasFocus(element)`
Returns true
if the given element currently
has the focus.
Functionally equivalent to
`focusManager.currentlyFocused === element`.

`focusManager.focus(element,focusOption)`
Focus on the given element.
Functionally the same as `element.focus()`.

`focusManager.orderedElements()`
Returns an array
of all focusable elements
in the order that
focus traversal would occur.
It can take an optional container
which would limit the results
to just descendants
of that container.

trap()
order()
and auto()
which I mentioned earlier
are also all coming soon
to the proposal.

<pause>

So that's the Proposed
Focus Traversal API.

I have submitted it to the WICG
and the WHATWG
as I told you
and now I'm telling you all about it.

I even fleshed out my
original library around focus
and made it a working polyfill
for the proposal
that you can use today
to shim all these
cool and useful
focus functions
into your applications
until we can get actual implementation
in the browsers.

Unfortunately though,
actual implementation is a long
long way away.

The WHATWG process
for enacting change
requires you to
convince browser manufacturers
on your own
that your idea is worthy
of their time.

And I can count on zero hands
the number of browser manufacturers
I am able to talk to.

However!
this is where I hope
You can help.

We need people to
comment on the proposal
on the WICG or WHATWG
(links in a minute)
and get involved in
the process.

We need people to
download the polyfill
try it out
find the bugs
help grow the proposal.

We need people to help
come up with ideas,
write tests,
be involved!

And we
especially
need people
to spread the word.

So,
I'm going to live tweet a picture
from this talk
with the links
and I need y'all
to go retweet it
and spread the word
with us.

<live tweet>

And finally,
if you are a browser manufacturer
or have any sway with them
come talk to me.
And lets figure out how
we can advance focus
together!

That's all I have to say.
Thanks for your focus.
