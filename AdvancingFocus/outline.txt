# Advancing Focus
---

Greetings.

If you could all focus on me.

<pause>

Do you see what I just did there?

I started a talk
about focus
by asking you to focus
Clever huh?

But I'm going to make it
super easy
for you all to focus
on what I'm talking about
with Kittens.
Being focused.

So buckle up,
we are about to go
on a kitten fueled
dive into focus
and ask the very important question
what has focus done for you lately
and can Glen,
that's me,
find 60 slides worth of kittens
to keep you entertained.

<pause>

So...
As I just said,

My name is Glen.

And I want to talk to you
about the browser focus subsystem.

For most of us,
the browser focus Subsystem
just works.

I press TAB
and focus increments.
I press SHIFT-TAB
and focus decrements.

It works.

But the question I am asking,
the real reason I'm up here in front of you,
is to ask,
Does it work well?
Does it meet the needs of the developers?
Could it do more to be better?

<pause>

In order to answer
these questions
we need to know
what exactly we are talking about
and where it comes from, so...

Very simply

and glossing over a lot of details...

Focus,
as it relates to user interfaces,
is the process
by which the computer
decides what part of the user interface
receives any human interaction.
A mouse click, a keystroke, etc.

For example,

when we press a key
The keyboard reports to
the operating system
which determines what key was pressed.

The operating system
then determines where the user
is currently targeting
their input at...

more precisely,
which window,
is the focus.
Only one window
can have the focus
at any given time.

If the browser
is the current window focused,
it tells the browser
about the keyboard press.

The browser then does
exactly what the Operating system did
and it determines which window or tab,
is currently targeted
to receive input,
which is,
in focus.
Only one window or tab,
can have the focus
at any given time,

Once the browser has determined
which window or tab
has the focus,
it gets the associated top level DOM document
for that window or tab.

The top level DOM Document
tracks which specific element
in the DOM
which is currently targeted
to receive input.

This is called the "activeElement".

The key press is then
translated into an event
and the event is then fired
with the activeElement
as its target.

<pause>

The activeElement,
together with the focus related events
(focus, blur, focusin, focusout)
and the element.focus() and the element.blur() function
make up the focus subsystem.

This is everything the browser
programmatically gives us to understand focus
and manipulate it.
That's it.
In its entirety.

That's what we are talking about today.
The focus subsystem.

And unsurprisingly,
the focus subsystem hasn't
changed significantly
in twenty years.

The focus subsystem
was first formally added
to the Document Object Model Specification Level 1
in January of 1998,
with a few minor tweaks a few years later.

And that's fine.
It's a 20 year old API
and it does its job.

Until it doesnt.

Say you are me.

And you need to write a web component
that wraps a single field
for entering a username.

And your customer comes to you
and says that the focus
when you press ENTER
should automatically advance
to the next field.

<aside>

I was recently telling someone
about this scenario
and they were shocked
someone would want to
advance focus on the ENTER keypress
I was shocked that they were shocked.
How had they never heard of this before?
It was very eye opening
for both of us
to get the different perspective
of the other.
And we both learned
a little something in the exchange
and came away better people.

So always be open
to other points of view.

</aside>

So our code might look like this:
(
	A note here...
	I'm using ZephJS to define
	the web component.
	I find it simplifies
	writing them.
	You can check it out at
	zephjs.com
)

import {ZephComponents,html,onEventAt} from "ZephJS";
ZephComponents.define("my-user-field",()=>{
	html(`
		<div class="wrapper">
			<input class="field" type="text"></input>
		</div>
	`);

	onEventAt("input","keyup",(elment,content,event)=>{
		if (event.keyCode===13) {

			???????????????

		}
	});
});

The problem is,
that our my-user-field component
is entirely encapsulated
and knows nothing about
what is outside of it.

We have no easy way
to just tell the focus
to advance to the next place.

Now,
everyone in this room
is probably thinking
just walk the tree
starting at your element
and locate the next element
which can receive focus
and advance to that.

Seems like a logical solution, right?
But this brings up a really hard question
about focus...

What makes an element
able to receive focus?
What indicates something is focusable?

And there are some easy answers

If the element is an INPUT tag
or SELECT tag
or Link
or BUTTON tag
or contentEditable
it can receive focus.

Except!!!
if it is DISABLED
or has a tabindex attribute of negative one
or is hidden
or is within a fieldset that is DISABLED
or is within a form that is DISABLED
but not all the time.

See, determining what is Focusable
is really hard.
and its incredibly inconsistent
across different browsers

Someone even made
a fancy chart
https://allyjs.io/data-tables/focusable.html
which I tried to shrink down
and get onto one slide
but there are just
too many edge cases.

Of course,
we can always go to the Spec
and that should be
super easy to understand.

https://www.w3.org/TR/2018/WD-html53-20181018/editing.html#focus
Section 5.4 of the W3C HTML Specification
details the focus subsystem.
Here's what it says about what is focusable

	- Elements that have their tabindex focus flag set, that are not actually disabled, that are not expressly inert, and that are either being rendered or being used as relevant canvas fallback content.

	- The shapes of area elements in an image map associated with an img element that is being rendered and is not expressly inert.

	- The user-agent provided subwidgets of elements that are being rendered and are not actually disabled or expressly inert

	- The scrollable regions of elements that are being rendered and are not expressly inert.

	- The viewport of a Document that is in a browsing context and is not inert.

	- Any other element or part of an element, especially to aid with accessibility or to better match platform conventions.

And I dont know about you
but I find this complicated
and confusing
as hell.

and honestly,
I really dont want to write
a method that tries
to figure this out.

<pause>

So we essentially have two problems

we have no easy way
to advance the focus
automatically.

and we have no easy way
to determine what can receive focus,
what is focusable,
if we wanted to walk the tree.

And the annoying thing about
these two problems
is that internally
in the browsers,
both these problems
are already solved.

The browsers,
internally,
have a means to determine
if an element is focusable
and they have a means
to advance the focus to
the next focusable element.

The focus subsystem today,
is mostly a passive thing.
we can read it,
we can tell where the focus is
and when it changes,
and we can direct it
if we know exactly
where to direct it.
And this is okay...
But is it good?
is it enough?
could it do more
to make developers lives easier?

I say yes,
it could do more
it could be easier
it could be more powerful

And all of That
begins
with exposing
three simple functions...

First,
a method to determine
if something can receive the focus.
I call this, isFocusable(e)

Second and Third,
methods to move the focus
forward or backward
regardless of where
the focus currently is.
I call these
forward() and backward().

And what other focus things
could we expose
or add
to make focus better?

What about a function
to trap (aka limit)
focus to a particular container?
meaning focus would cycle
within the focusable elements
in that container,
but never out of it
until told otherwise.

What about a programmatic way
to order the focusable
elements and enforce
that order.

Sure we have tabindex
to do that
but wouldn't a function
that takes an array of the elements
and does the ordering for us
be really helpful?

And there are other
things that could really make
focus more understandable.
Lots more.

a previousACtiveElement property
or history array
of what was previously focused
could be nice.

A programmatic way
to set an element
as the first element
tpo get the focus
once the page is loaded
might be nice.

And probably other things
I haven't even considered.

<pause>

So naturally,
when you have all these
great ideas to add to browsers
we write a new library
and publish it
to the INTERNET
and everyone
will instantly use it
and throw flowers at my feet.

I set out to do that
about six months ago.

I started with a library
called "Tabbable"
written by David Clark.
// Tabbable from David Clark.
// https://github.com/davidtheclark/tabbable

Tabbable will return an array
of all descendant nodes
for a given node
which meet its internal definition
of what is a focusable element.

So naturally,
I "stole" its
code for determining
what is focusable.

From there I added a global object
to window
called focusManager for housing
my new focus functions.

And about this time
I started thinking
why am I writing a library?
why doesn't the browser
just have these functions natively.
And if not,
is this something I could get changed?

<pause>

So let me tell you
how you go about changing
the HTML Specification

First, as most of you may be aware
there are two separate
governing bodies
maintaining the HTML standard
The W3C
and the WHATWG

And until this past May
they worked independently
of one another
but tacitly acknowledging
one another.

In May of 2019 (https://www.w3.org/blog/2019/05/w3c-and-whatwg-to-work-together-to-advance-the-open-web-platform/)
both the W3C and WHATWG
signed an agreement
to work together
with the HTML Specification
work being done in the WHATWG.

This is great news for everyone.
A single body
overseeing the HTML standard.
Finally.

Now,
let us say that you are
an ordinary run of the mill developer
and you want to propose some changes
to the HTML specification.
How do you do that?

Well,
six months ago,
you would probably google
something like
"how to propose changes to the HTML standard"
And the first hit you get might be to
the W3C Process Document

Which you would read
for a few minutes
and slowly feel the sanity
draining from you
as if cthulhu himself
was sitting next to you
eating pie
and waiting for you to
wither away.

But if you were persistent
you might eventually find
something called the
Web Platform Incubator Community Group
or WICG
which was formed in 2015
to allow people
to make proposals
Wooohooo!

So you write up your idea
and submit it to the WICG
discourse group for discussion

And then you wait
And a few people read it
and comment on it,
and there's a tiny bit of discussion
but nothing else happens

And you begin to realize
that the WICG Process
really doesn't work
or you worry
that perhaps your idea
is really garbage
and that you are really garbage

Fortunately,
we have alcohol to counteract
that garbage pessimism
and I drank a lot of it
to do so.

And while I was doing that,
the aforementioned agreement
between the W3C and WHATWG
comes down
and you realize
you need to get your proposal
in front of WHATWG eyeballs.

So you open a ticket there.
and you write some articles
and post to reddit,
hacker news,
and newsletters,
twitter,
etc.

And this being the internet
you get almost no feedback
and you wonder what to do next.

So you do the next great thing
you can think of
and you take your idea on the road
and you grab a coveted JSConf speaker slot
and you tell a room half full
of eager minds all about

The Focus Traversal API
A Focus Subsystem Proposal to the HTML Specification

This proposal
formally introduces the concepts
of a Focus Traversal API
to solve the two problems
we discussed earlier:
How to determine what is focusable
and how to programmatically
increment/decrement the focus

This API exists
as an additional set of behaviors
over and above what can be done
with the existing focus system.
Nothing about the existing
focus subsystem changes,
the proposal is purely addative.

This proposal,
built from my initial library work
suggests creating a top level `window` property
called `focusManager`
which will be used to expose
a series of properties and methods
for working with Focus traversal.

#### Focusable

To address the complexity
of determining if an element
is focusable or not
it is proposed
to create `focusManager.isFocusable(element)`
which will return true
if the given element
is able to receive the focus
according to the Focus rules laid out
in the HTML standard.

#### Next/Previous Focus

Moving the focus
forward or backward
is a key operation for developers
and the Focus Traversal API
seeks to ease this process
with `focusManager.next(element)`
and `focusManager.previous(element)`
methods.

These functions will return
the next (or previous) element
that meets the `focusManager.isFocusable()` condition,
or null.

This only indicates which element
is next or prior,
it does not actually
move the focus.

For that we turn to...

#### Forward/Backward Focus Traversal

`focusManager.forward()` takes
the currently focused element
and computes the next element
that meets the `focusManager.isFocusable()` condition,
and advances the focus to that element
using `element.focus()`.

`focusManager.backward()` is similar
but it computes the pervious element
that meets the `focusManager.isFocusable()` condition
and moves the focus to that element
using `element.focus()`.

#### Other Features

As part of this proposal
some additional conveniences
are offered
in an attempt to centralize
and organize the focus system.

`window.focusManager.currentlyFocused` -
Contains the element
currently holding the focus,
if any.
Functionally the same as
`document.activeElement`.

`window.focusManager.previouslyFocused` -
Contains the element
that held the focus
prior to the current focus,
if any.

`window.focusManager.history`
An array of the last n
historical focus holders.
It is recommended this be capped
at some number like 50 or 100
to prevent unnecessary memory leakage.

`window.focusManager.hasFocus(element)`
Returns true
if the given element currently
has the focus.
Functionally equivalent to
`window.focusManager.currentlyFocused === element`.

`window.focusManager.focus(element,focusOption)`
Focus on the given element.
Functionally the same as `element.focus()`.
Returns void.

`window.focusManager.orderedElements()`
Returns an array
of all focusable elements
in the order that
focus traversal would occur.
It can take an optional container
which would limit the results
to just descendants
of that container.

trap()
order()
and auto()
are all coming soon.

<pause>

So that's the Proposed
Focus Traversal API.

I have submitted it to the WICG
and the WHATWG
and now I'm telling you all about it.

I even fleshed out my
original library around focus
and made it a working polyfill
that you can use today
to shim all these
cool and useful
focus functions
into your applications today
until we can get actual implementation.

Unfortunately though,
actual implementation is a long
long way away.

The WHATWG process
for enacting change
requires you to
convince browser manufacturers
that your idea is worthy
of their time.

And I can count on zero hands
the number of browser manufacturers
I am able to talk to.

However!
You can help.

We need people to
comment on the proposal
on the WICG or WHATWG
(links in a minute)
and get involved in
the process.

We need people to
download the polyfill
try it out
find the bugs
help grow the proposal.

We need people to help
come up with ideas,
write tests,
be involved!

And we
especially
need people
to spread the word.

So,
I'm going to live tweet a picture
from this talk
with the links
and I need y'all
to go retweet it
and spread the word
with us.

<live tweet>

And finally,
if you are a browser manufacturer
or have any sway with them
come talk to me.
And lets figure out how
we can advance focus
together!

That's all I have to say.
Thanks for your focus.
