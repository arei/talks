Advancing Focus

Some things in web development just work; they do what they are supposed to do day in and day out, and we don't ever have to worry about them. It's the "little engine that could" story: it's reliable, it stable, it's trustworthy. The Focus subsystem is one such system... reliable, stable, trustworthy, but is it good... does it meet the needs of modern web development? This talk delves into the Focus subsystem for Web Browsers and asks us to consider is there more it could be doing and how do we make it happen?

https://raw.githubusercontent.com/arei/talks/master/headshot.jpg

Intro

SEt the STage - TAlk about what we are talking about

History of Focus

How Focus Works Today

	.focus()

	focus and blur events

	foucsin and focusout events

	document.activeElement

What could make it better?

	What can receive focus? Focusable

	Incrementing Focus

 	Decrementing focus

	tracking focus

	focus trapping

How do we get there?

	The WICG and "The Process"

	THe Focus TRaversal API Proposal

	THe Polyfill

	Eyeballs Needed

	Mentions Needed


---

Greetings.

If you could all focus on me.

<pause>

Do you see what I just did there?

I started a talk
about focus
by asking you to focus
Clever huh?

So...

My name is Glen.

And I want to talk to you
about the browser focus subsystem.

For most of us,
browser focus just works.
I press TAB
and focus increments.
I press SHIFT-TAB
and focus decrements.

The focus subsystem
was first formally added
to the Document Object Model Specification Level 1
in January of 1998.

And barring a few very small additions,
this is the focus system
we work with today.

And that's fine.
It's a 20 year old API
and it does its job.
Until it doesnt.

Say we have a form
with two fields
a username and a password.
And our client wants
to advance the focus
from the username field
to the password field
when the enter key is pressed
and only if the username field
has some content.
